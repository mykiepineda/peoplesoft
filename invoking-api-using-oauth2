Local boolean &RET;

Constant &DELIMITER = "&";

Function GenerateAuthorisationToken(&CONSUMER_NAME as String, &CLIENT_ID as String, &CLIENT_SECRET as String)
   
   Local Message &MSG_RQST_TOKEN, &MSG_RESP_TOKEN;
   Local string &DATA, &CLIENT_ID, &CLIENT_SECRET, &GRANT_TYPE, &ACCESS_TOKEN, &EXPIRES_IN_SECONDS, &TOKEN_TYPE;
   Local Document &DOC_RESP;
   Local Compound &COM_RESP;
   
   /* Request */
   
   &MSG_RQST_TOKEN = CreateMessage(Operation.UOA_COGNITO_AUTH_TOKEN_POST);
   
   &MSG_RQST_TOKEN.URIResourceIndex = 1;
   
   &CLIENT_ID = "client_id=" | EncodeURL("4kk***2ih"); /* TODO: Retrieve value from table instead */
   &CLIENT_SECRET = "client_secret=" | EncodeURL("1qg***clc"); /* TODO: Retrieve value from table instead */
   &GRANT_TYPE = "grant_type=" | "client_credentials";
   &DATA = &CLIENT_ID | &DELIMITER | &CLIENT_SECRET | &DELIMITER | &GRANT_TYPE;
   
   &RET = &MSG_RQST_TOKEN.SetContentString(&DATA);
   
   &MSG_RQST_TOKEN.SegmentContentType = "application/x-www-form-urlencoded";
   
   &MSG_RESP_TOKEN = %IntBroker.SyncRequest(&MSG_RQST_TOKEN);
   
   /* Response */
   
   If &MSG_RESP_TOKEN.ResponseStatus = %IB_Status_Success Then
      &DOC_RESP = &MSG_RESP_TOKEN.GetDocument();
      &COM_RESP = &DOC_RESP.DocumentElement;
      &ACCESS_TOKEN = &COM_RESP.GetPropertyByName("access_token").value;
      &EXPIRES_IN_SECONDS = &COM_RESP.GetPropertyByName("expires_in").value;
      &TOKEN_TYPE = &COM_RESP.GetPropertyByName("token_type").value;

      try
         &oAuthToken.expiresInSeconds = Value(&EXPIRES_IN_SECONDS);
      catch Exception &ex
         &oAuthToken.expiresInSeconds = 0;
      end-try;
      &oAuthToken.setExpiryDate();
      &oAuthToken.accessToken = &ACCESS_TOKEN;
      &oAuthToken.tokenType = &TOKEN_TYPE;
   Else
      throw CreateException(0, 0, &MSG_RESP_TOKEN.GetContentString());
   End-If;
   
End-Function;

Function GetAuthorisationHeader(&p_sConsumerName as String) Returns string
   
   Local string &CLIENT_ID, &CLIENT_SECRET, &AUTHORISATION_HEADER;
   
   If None(&p_sConsumerName) Then
      throw CreateException(30000, 422, "Consumer Name is required for generating an OAuth 2.0 Token");
   End-If;
   
   SQLExec("SELECT UOA_CLIENT_ID, UOA_CLIENT_SECRET FROM PS_UOA_API_KEY_TBL WHERE UOA_API_CONSUMER = :1", &p_sConsumerName, &CLIENT_ID, &CLIENT_SECRET);
   
   If Not All(&CLIENT_ID, &CLIENT_SECRET) Then
      throw CreateException(30000, 423, "No OAuth 2.0 Client Credentials in Key Store for consumer", &p_sConsumerName);
   End-If;
   
   If &oAuthToken.isExpired() Then
      /* Need to generate a new one */
   Else
      &AUTHORISATION_HEADER = &oAuthToken.getAuthorizationHeader();
   End-If;
   
   If None(&AUTHORISATION_HEADER) Then
      /* Token has expired. Generate new authorisation token */
      GenerateAuthorisationToken();
      /* Recursive call */
      &AUTHORISATION_HEADER = GetAuthorisationHeader();
   End-If;
   
   Return &AUTHORISATION_HEADER;
   
End-Function;

/******************* MAIN - CALL API *******************/

Local Message &MSG_RQST_API, &MSG_RESP_API;

/* Request */

&MSG_RQST_API = CreateMessage(Operation.UOA_OSC_SR_STUD_TOPICS_GET);

&MSG_RQST_API.URIResourceIndex = 1;

&RET = &MSG_RQST_API.IBInfo.IBConnectorInfo.AddConnectorProperties("Authorization", GetAuthorisationHeader(), %Header);

&MSG_RESP_API = %IntBroker.SyncRequest(&MSG_RQST_API);

/* Response */

If &MSG_RESP_API.ResponseStatus = %IB_Status_Success Then
   WinMessage(&MSG_RESP_API.GetContentString(), 0);
Else
   throw CreateException(0, 0, &MSG_RESP_API.GetContentString());
End-If;
